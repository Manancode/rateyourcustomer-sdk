declare class RateYourCustomer {
    apiKey: string;
    baseUrl: string;
    constructor(apiKey: string, baseUrl?: string);
    trackEvent(eventType: string, payload: any): Promise<any>;
    trackPaymentReceived(customerId: number, amount: number, paymentDate: string): Promise<any>;
    trackPaymentMissed(customerId: number, missedDate: string): Promise<any>;
    trackPaymentTermsChanged(customerId: number, newTerms: string, updatedDate: string): Promise<any>;
    trackOrderPlaced(customerId: number, orderValue: number, orderDate: string, status: string): Promise<any>;
    trackOrderUpdated(customerId: number, orderId: string, updatedFields: any): Promise<any>;
    trackOrderCancelled(customerId: number, orderId: string, cancelDate: string): Promise<any>;
    trackLifetimeValueUpdated(customerId: number, totalRevenue: number, startDate: string, endDate: string, details: any): Promise<any>;
    trackLifetimeValueCalculated(customerId: number, totalRevenue: number, startDate: string, endDate: string, details: any): Promise<any>;
    trackProductUsageUpdated(customerId: number, featureUsed: string, usageDuration: number, usageDate: string): Promise<any>;
    trackFeatureUsageDeclined(customerId: number, featureUsed: string, declineReason: string, declineDate: string): Promise<any>;
    trackPurchaseFrequencyChanged(customerId: number, numberOfPurchases: number, purchaseDates: any, Frequency: string): Promise<any>;
    trackRenewalRateUpdated(customerId: number, renewalRate: number, lastRenewalUpdate: string): Promise<any>;
    trackRenewalRiskIdentified(customerId: number, riskDetails: string, identifiedDate: string): Promise<any>;
    trackReturnRateUpdated(customerId: number, numberOfReturns: number, totalOrders: Number, returnDates: any, returnDetails: any): Promise<any>;
    trackSupportTicketCreated(customerId: number, ticketId: string, createdAt: string): Promise<any>;
    trackSupportTicketResolved(customerId: number, ticketId: string, resolvedAt: string, satisfactionScore: number): Promise<any>;
    trackUpsellOpportunityCreated(customerId: number, description: string, value: number, status: string): Promise<any>;
    trackUpsellOpportunityLost(customerId: number, lossReason: string, lossDate: string): Promise<any>;
    trackCustomerEngagementUpdated(customerId: number, engagementScore: number, lastEngaged: string, details: any): Promise<any>;
    trackCustomerSuccessUpdated(customerId: number, successScore: number, milestone: string, achievedAt: string, details: any): Promise<any>;
    trackSuccessMilestoneAchieved(customerId: number, achievedAt: string, milestone: string, details: any): Promise<any>;
    trackFeedbackScoreUpdated(customerId: string, userId: string, oldScore: number, newScore: number): Promise<any>;
    trackDataSyncCompleted(customerId: string, userId: string, syncDetails: any): Promise<any>;
    trackContractCreated(customerId: number, feedbackScore: number, feedbackDate: string, feedbackType: string, details: any): Promise<any>;
    trackContractUpdated(customerId: number, contracLength: number, startDate: string, endDate: string, renewalDate: string, updatedDate: string): Promise<any>;
    trackContractTerminated(customerId: number, terminationDetails: string, terminationDate: string): Promise<any>;
    trackAccountHealthUpdated(customerId: number, healthScore: number, status: string, details: any, updatedDate: string): Promise<any>;
    trackResourceDownloaded(customerId: number, resourceId: string, downloadDate: string): Promise<any>;
    trackSupportArticleViewed(customerId: number, articleId: string, viewDate: string): Promise<any>;
}
export default RateYourCustomer;
